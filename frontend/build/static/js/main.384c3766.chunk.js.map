{"version":3,"sources":["Components/logo.svg","serviceWorker.js","Redux/Reducers/Test.js","Redux/Store.js","Redux/Constants/ActionTypes.js","Router/History.js","Components/App.js","Redux/Actions/Test.js","Router/AppRouter.js","index.js"],"names":["module","exports","Boolean","window","location","hostname","match","initialState","test","createStore","combineReducers","testStore","state","action","type","payload","__REDUX_DEVTOOLS_EXTENSION__","createBrowserHistory","App","this","props","updateTest","className","src","logo","alt","Component","connect","dispatch","value","AppRouter","history","path","rootElement","document","getElementById","ReactDOM","render","store","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"sHAAAA,EAAOC,QAAU,IAA0B,kC,+JCYvBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,2BCdAC,EAAe,CACnBC,KAAM,ICFOC,cACXC,YAAgB,CACZC,UDGO,WAAmC,IAAlCC,EAAiC,uDAAzBL,EAAcM,EAAW,uCAC7C,OAAQA,EAAOC,MACX,IEVY,OFWR,OAAO,eACAF,EADP,CAEIJ,KAAMK,EAAOE,UAErB,QACI,OAAOH,MCTfT,OAAOa,8BAAgCb,OAAOa,gC,uDELnCC,gB,uBCKR,IAAMC,EAAb,4LAIIC,KAAKC,MAAMC,WAAW,yBAJ1B,+BAQI,OACE,yBAAKC,UAAU,OACb,4BAAQA,UAAU,cAChB,yBAAKC,IAAKC,IAAMF,UAAU,WAAWG,IAAI,SACzC,4CAAkBN,KAAKC,MAAMZ,YAZvC,GAAyBkB,aA8BVC,eANS,SAAAf,GACtB,MAAO,CACLJ,KAAMI,EAAMD,UAAUH,SANC,SAACoB,GAAD,MAAe,CACxCP,WAAY,SAACQ,GAAD,OAAWD,ECvBd,CACHd,KHNY,OGOZC,QDqBqCc,QAS9BF,CAA6CT,GEjB7CY,E,iLAZP,OACA,kBAAC,IAAD,CAAQC,QAASA,GACb,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOC,KAAK,KACR,kBAAC,EAAD,a,GAPIN,aCKlBO,EAAcC,SAASC,eAAe,QAC5CC,IAASC,OACP,kBAAC,IAAD,CAAUC,MAAOA,GACf,kBAAC,EAAD,OAEFL,GRoHI,kBAAmBM,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.384c3766.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { \n    TEST\n} from \"../Constants/ActionTypes\";\n\nconst initialState = {\n  test: \"\"\n};\n\nexport default (state = initialState, action) => {\n    switch (action.type) {\n        case TEST:\n            return {\n                ...state,\n                test: action.payload\n            }\n        default:\n            return state\n    }\n}","import { createStore, combineReducers } from \"redux\";\nimport testStore from \"./Reducers/Test\"\n\nexport default createStore(\n    combineReducers({\n        testStore\n    }),\n    window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n);","export const TEST = \"TEST\"","import { createBrowserHistory } from 'history';\n\nexport default createBrowserHistory();","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nimport { connect } from \"react-redux\";\nimport { updateTest } from \"../Redux/Actions/Test\"\n\nexport class App extends Component {\n\n\n  componentDidMount(){\n    this.props.updateTest(\"Sent to redux store\")\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <p>Redux \"test\": {this.props.test}</p>\n        </header>\n      </div>\n    );\n  }\n\n}\n\nconst mapDispatchToProps = (dispatch) => ({\n  updateTest: (value) => dispatch(updateTest(value)),\n});\n\nconst mapStateToProps = state => {\n  return { \n    test: state.testStore.test\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import { \n    TEST\n} from \"../Constants/ActionTypes\";\n\nexport function updateTest(payload) {\n    return { \n        type: TEST, \n        payload \n    }\n};","import React, { Component } from \"react\";\nimport { Router, Switch, Route } from \"react-router-dom\";\nimport history from './History';\nimport App from '../Components/App'\n\nclass AppRouter extends Component {\n\n    render() {\n        return (\n        <Router history={history} >\n            <Switch >\n                <Route path=\"/\">\n                    <App />\n                </Route>\n            </Switch>\n        </Router>\n        )\n    }\n}\n\nexport default AppRouter","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\n\nimport { Provider } from 'react-redux'\nimport store from './Redux/Store'\n\nimport AppRouter from './Router/AppRouter'\n\nconst rootElement = document.getElementById('root')\nReactDOM.render(\n  <Provider store={store}>\n    <AppRouter />\n  </Provider>,\n  rootElement\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}